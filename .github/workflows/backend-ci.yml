name: Backend CI/CD

on:
  pull_request_target:
    branches: [ main ]
    paths:
      - 'se2025BackEnd/**'
    

jobs:
  backend-build-test:
    runs-on: ubuntu-latest
    steps:  
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}  # 明确指定PR源分支
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          
      - name: Build backend
        working-directory: se2025BackEnd
        run: mvn package -DskipTests

  backend-deploy:
    needs: backend-build-test
    if: github.event_name == 'pull_request_target'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}  # 明确指定PR源分支
          fetch-depth: 0
      
      - name: Set up JDK for deploy
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          
      - name: Build backend JAR
        working-directory: se2025BackEnd
        run: mvn package -DskipTests
          
      - name: Transfer backend files to Huawei Cloud
        run: |
          sudo apt-get install -y sshpass
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -o StrictHostKeyChecking=no -r se2025BackEnd/target/*.jar Administrator@${{ secrets.HUAWEI_SERVER_IP }}:"C:/Users/Administrator/project/temp/deploy/target/"

      - name:  Backend deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HUAWEI_SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script_stop: true  # 出错时停止
          debug: true        # 启用调试输出
          script: |
                  powershell.exe -ExecutionPolicy Bypass -Command "
                  '=== 开始后端部署 ===' | Out-Host

                  '步骤1: 获取8080端口进程ID并停止' | Out-Host
                  `$processId = (netstat -ano | findstr :8080 | findstr LISTENING | Select-Object -First 1) -split '\\s+' | Select-Object -Last 1
                  (\"找到进程ID: \" + `$processId) | Out-Host
                  if (`$processId) {
                      (\"停止进程 (PID: \" + `$processId + \")\") | Out-Host
                      Stop-Process -Id `$processId -Force
                      Start-Sleep -Seconds 3
                      '进程已停止' | Out-Host
                  } else {
                      '没有找到占用8080端口的进程' | Out-Host
                  }

                  '步骤2: 部署新版本' | Out-Host
                  mkdir 'C:\Users\Administrator\project\backend' -Force
                  Copy-Item 'C:\Users\Administrator\project\temp\deploy\target\*.jar' 'C:\Users\Administrator\project\backend\' -Force
                  '文件复制完成' | Out-Host

                  '步骤3: 启动服务' | Out-Host
                  `$jarPath = 'C:\Users\Administrator\project\backend\project-0.0.1-SNAPSHOT.jar'
                  Start-Process -FilePath 'java' -ArgumentList '-jar', `$jarPath -NoNewWindow -WorkingDirectory 'C:\Users\Administrator\project\backend'
                  '服务启动命令已执行' | Out-Host

                  '步骤4: 验证启动' | Out-Host
                  Start-Sleep -Seconds 10
                  `$isRunning = netstat -ano | findstr :8080
                  if (`$isRunning) {
                      '✅ 后端服务启动成功' | Out-Host
                      '当前8080端口状态:' | Out-Host
                      netstat -ano | findstr :8080 | Out-Host
                  } else {
                      '❌ 后端服务启动失败' | Out-Host
                      exit 1
                  }

                  '=== 后端部署完成 ===' | Out-Host
                  "