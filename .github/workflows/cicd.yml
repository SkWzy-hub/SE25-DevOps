name: CI/CD Pipeline

on:
  pull_request_target:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:  
    - name: Checkout code
      uses: actions/checkout@v3

    # 前端构建测试
    - name: Set up image.pngNode.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
    - name: Install frontend dependencies
      working-directory: se2025FrontEnd
      run: npm install
    - name: Build frontend
      working-directory: se2025FrontEnd
      run: npm run build

    # 后端构建测试
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
    - name: Build backend
      working-directory: se2025BackEnd
      run: mvn package -DskipTests  # 跳过测试（如果测试需要数据库等环境）

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK for deploy
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
      
    # 准备前端文件
    - name: Build frontend for deploy
      working-directory: se2025FrontEnd
      run: |
        npm install
        npm run build
        
    # 准备后端JAR
    - name: Build backend JAR
      working-directory: se2025BackEnd
      run: mvn package -DskipTests
      
    # SCP到华为云
    - name: Transfer files to Huawei Cloud
      run: |
        sudo apt-get install -y sshpass

        # 创建部署脚本
        sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no Administrator@${{ secrets.HUAWEI_SERVER_IP }} "powershell.exe -Command @'
# 杀死所有 Java 进程
Write-Host \"正在停止所有 Java 进程...\"
\$javaProcesses = Get-Process -Name \"java\" -ErrorAction SilentlyContinue
if (\$javaProcesses) {
    Write-Host \"找到 \$(\$javaProcesses.Count) 个 Java 进程，正在停止...\"
    \$javaProcesses | ForEach-Object {
        Write-Host \"停止进程: \$(\$_.ProcessName) (PID: \$(\$_.Id))\"
    }
    Stop-Process -Name \"java\" -Force -ErrorAction SilentlyContinue
    Start-Sleep -Seconds 2

    # 确认进程已停止
    \$remainingProcesses = Get-Process -Name \"java\" -ErrorAction SilentlyContinue
    if (\$remainingProcesses) {
        Write-Warning \"仍有 Java 进程在运行，尝试强制终止...\"
        \$remainingProcesses | Stop-Process -Force
        Start-Sleep -Seconds 1
    }
    Write-Host \"所有 Java 进程已停止\"
} else {
    Write-Host \"没有找到运行的 Java 进程\"
}

# 创建目录
Write-Host \"创建项目目录...\"
mkdir \"C:\Users\Administrator\project\backend\" -Force
mkdir \"C:\Users\Administrator\project\frontend\" -Force

# 清空前端目录并复制文件
if (Test-Path \"C:\Users\Administrator\project\frontend\*\" ) {
    Remove-Item \"C:\Users\Administrator\project\frontend\*\" -Recurse -Force
    Write-Host \"前端目录已清空\"
}
xcopy \"C:\Users\Administrator\project\temp\deploy\dist\*\" \"C:\Users\Administrator\project\frontend\\\" /E /Y
Write-Host \"前端文件复制完成\"

# 显示前端文件
Write-Host \"前端文件列表：\"
dir \"C:\Users\Administrator\project\frontend\"

# 复制后端 JAR 文件
copy \"C:\Users\Administrator\project\temp\deploy\target\*.jar\" \"C:\Users\Administrator\project\backend\\\" -Force
Write-Host \"后端 JAR 文件复制完成\"

# 显示后端文件
Write-Host \"后端文件列表：\"
dir \"C:\Users\Administrator\project\backend\"

# 检查环境
Write-Host \"环境检查：\"
node -v
npm -v
java -version

# 安装 serve 并启动前端
Write-Host \"安装 serve...\"
npm install -g serve

Write-Host \"启动前端服务...\"
cd \"C:\Users\Administrator\project\frontend\"
Start-Process -FilePath \"npx\" -ArgumentList \"serve\", \"-s\", \"-l\", \"5173\" -WindowStyle Normal

# 启动后端
Write-Host \"启动后端服务...\"
cd \"C:\Users\Administrator\project\backend\"
\$jarFile = Get-ChildItem \"*.jar\" | Select-Object -First 1
Write-Host \"启动 JAR 文件: \$(\$jarFile.Name)\"
Start-Process -FilePath \"java\" -ArgumentList \"-jar\", \$jarFile.Name -RedirectStandardOutput \"app.log\" -RedirectStandardError \"app-error.log\" -WindowStyle Normal

# 等待并检查进程
Write-Host \"等待服务启动...\"
Start-Sleep -Seconds 10
\$process = Get-Process -Name java -ErrorAction SilentlyContinue
if (\$process) {
    Write-Host \"Java进程运行中：\$(\$process.Id)\"
} else {
    Write-Host \"Java进程未找到\"
    Write-Host \"最后10行应用日志:\"
    Get-Content \"app.log\" -Tail 10 -ErrorAction SilentlyContinue
    Write-Host \"最后10行错误日志:\"
    Get-Content \"app-error.log\" -Tail 10 -ErrorAction SilentlyContinue
    exit 1
}

Write-Host \"部署完成！前端运行在端口 5173，后端服务已启动\"
'@ | Out-File -FilePath \"deploy.ps1\" -Encoding utf8"

        # 传输前端和后端文件
        sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -o StrictHostKeyChecking=no -r se2025FrontEnd/dist/* Administrator@${{ secrets.HUAWEI_SERVER_IP }}:"C:/Users/Administrator/project/temp/deploy/dist/"

        sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -o StrictHostKeyChecking=no -r se2025BackEnd/target/* Administrator@${{ secrets.HUAWEI_SERVER_IP }}:"C:/Users/Administrator/project/temp/deploy/target/"

        
    - name: Deploy and Start Application
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HUAWEI_SERVER_IP }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        command_timeout: 30m
        script: |
          echo "=== 开始执行部署脚本 ==="
          powershell.exe -ExecutionPolicy Bypass -File "deploy.ps1"
        